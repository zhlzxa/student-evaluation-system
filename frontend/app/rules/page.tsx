"use client";
import { useApi } from '../../lib/api';
import { useApiQuery, useApiMutation } from '../../lib/useApiQuery';
import { Alert, Box, Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, Stack, Table, TableBody, TableCell, TableHead, TableRow, TextField, Typography, CircularProgress, TableContainer, Paper, IconButton } from '@mui/material';
import { useState } from 'react';
import { useToast } from '../../components/providers/ToastProvider';
import { Add, Delete as DeleteIcon, Gavel } from '@mui/icons-material';
import { formatLocalDateTime } from '../../lib/date';

export default function MetricsPage() {
  const api = useApi();
  const { addToast } = useToast();
  const rules = useApiQuery(['rules-sets'], '/rules/sets');
  const [open, setOpen] = useState(false);
  const [url, setUrl] = useState('');
  // Name will be auto-generated by backend; description not required for import flow
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [ruleToDelete, setRuleToDelete] = useState<any>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  // Use shared local datetime formatter

  const createMutation = useApiMutation(
    async (data: { url: string }) => {
      // Use unified import endpoint that auto-generates name from URL
      return api('/rules/import-from-url', {
        method: 'POST',
        body: JSON.stringify({ url: data.url })
      });
    },
    {
      onSuccess: () => {
        addToast({
          message: 'Rule set imported successfully',
          severity: 'success'
        });
        setOpen(false);
        setUrl('');
        rules.refetch();
      },
      onError: (error) => {
        console.error('Create rule set error:', error);
        addToast({
          message: 'Failed to import rule set',
          severity: 'error'
        });
      }
    }
  );

  const onCreate = async () => {
    if (!url.trim()) {
      addToast({
        message: 'Please enter a programme URL',
        severity: 'warning'
      });
      return;
    }

    createMutation.mutate({ url: url.trim() });
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        backgroundColor: '#ffffff',
        py: 4,
        px: { xs: 2, sm: 4, md: 6, lg: 8 }
      }}
    >
      <Stack spacing={4}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
          <Box>
            <Typography 
              variant="h4" 
              component="h1" 
              sx={{ 
                fontWeight: 600,
                fontSize: '2rem',
                color: 'text.primary',
                mb: 0.5
              }}
            >
              Metrics
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Import and delete programme admission requirements
            </Typography>
          </Box>
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => setOpen(true)}
            sx={{
              backgroundColor: 'primary.main',
              color: 'primary.contrastText',
              px: 3,
              py: 1.5,
              borderRadius: 2,
              fontWeight: 600,
              textTransform: 'none',
              boxShadow: 2,
              '&:hover': {
                backgroundColor: 'primary.dark',
                boxShadow: 3,
              }
            }}
          >
            Create
          </Button>
        </Box>

        {rules.isError && (
          <Alert severity="error">
            Failed to load rules. Please try refreshing the page.
          </Alert>
        )}

        {rules.isLoading ? (
          <Stack spacing={2} alignItems="center" sx={{ py: 4 }}>
            <CircularProgress />
            <Typography>Loading rules...</Typography>
          </Stack>
        ) : (Array.isArray(rules.data) && rules.data.length === 0) ? (
          <Card elevation={1} sx={{ p: 4, textAlign: 'center' }}>
            <Gavel sx={{ fontSize: 80, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" color="text.secondary" gutterBottom>
              No rule sets found
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Click Create to import from a programme URL. Like: https://www.ucl.ac.uk/prospective-students/graduate/taught-degrees/computer-science-msc
            </Typography>
          </Card>
        ) : (
          <TableContainer component={Paper} elevation={2}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 'bold' }}>Name</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Created</TableCell>
                  <TableCell align="center" sx={{ fontWeight: 'bold' }}>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {(rules.data || []).map((rs: any) => (
                  <TableRow 
                    key={rs.id}
                    sx={{ '&:hover': { backgroundColor: 'action.hover' } }}
                  >
                    <TableCell sx={{ py: 2 }}>{rs?.metadata_json?.programme_title || rs.name}</TableCell>
                    <TableCell sx={{ py: 2 }}>{formatLocalDateTime(rs.created_at)}</TableCell>
                    <TableCell align="center" sx={{ py: 2 }}>
                      <IconButton
                        color="error"
                        onClick={() => { setRuleToDelete(rs); setDeleteDialogOpen(true); }}
                        title="Delete"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        <Dialog open={open} onClose={() => setOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle>Import Rule Set</DialogTitle>
          <DialogContent>
            {createMutation.isPending ? (
              <Stack spacing={2} sx={{ mt: 1 }}>
                <Stack direction="row" spacing={2} alignItems="center">
                  <CircularProgress size={24} />
                  <Typography>
                    Importing from URL... This may take 20â€“60 seconds depending on the page size.
                  </Typography>
                </Stack>
                <Typography variant="body2" color="text.secondary">
                  URL: {url}
                </Typography>
              </Stack>
            ) : (
              <Stack spacing={2} sx={{ mt: 1 }}>
                <TextField 
                  label="Programme URL" 
                  value={url} 
                  onChange={e => setUrl(e.target.value)}
                  required
                  fullWidth
                />
              </Stack>
            )}
          </DialogContent>
          <DialogActions>
            {createMutation.isPending ? (
              <>
                <Button onClick={() => setOpen(false)}>
                  Hide
                </Button>
                <Button variant="contained" disabled>
                  <CircularProgress size={20} />
                </Button>
              </>
            ) : (
              <>
                <Button onClick={() => setOpen(false)} disabled={createMutation.isPending}>
                  Cancel
                </Button>
                <Button 
                  onClick={onCreate} 
                  variant="contained" 
                  disabled={createMutation.isPending || !url.trim()}
                >
                  {createMutation.isPending ? <CircularProgress size={20} /> : 'Import'}
                </Button>
              </>
            )}
          </DialogActions>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog
          open={deleteDialogOpen}
          onClose={() => { if (!isDeleting) { setDeleteDialogOpen(false); setRuleToDelete(null); } }}
          aria-labelledby="delete-dialog-title"
          aria-describedby="delete-dialog-description"
        >
          <DialogTitle id="delete-dialog-title">Confirm Deletion</DialogTitle>
          <DialogContent>
            <Typography id="delete-dialog-description">
              Are you sure you want to delete "{ruleToDelete?.name}"?
              This action cannot be undone.
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => { setDeleteDialogOpen(false); setRuleToDelete(null); }} disabled={isDeleting}>Cancel</Button>
            <Button 
              color="error" 
              variant="contained"
              disabled={isDeleting || !ruleToDelete}
              onClick={async () => {
                if (!ruleToDelete) return;
                try {
                  setIsDeleting(true);
                  const resp = await api(`/rules/sets/${ruleToDelete.id}`, { method: 'DELETE' });
                  if (resp.ok) {
                    await rules.refetch();
                    setDeleteDialogOpen(false);
                    setRuleToDelete(null);
                  } else {
                    addToast({ message: 'Failed to delete rule set', severity: 'error' });
                  }
                } catch (e) {
                  console.error('Delete rule set error:', e);
                  addToast({ message: 'Delete failed', severity: 'error' });
                } finally {
                  setIsDeleting(false);
                }
              }}
            >
              {isDeleting ? <CircularProgress size={20} /> : 'Delete'}
            </Button>
          </DialogActions>
        </Dialog>
      </Stack>
    </Box>
  );
}

